{"version":3,"sources":["lib/calc.ts","lib/icon.ts","components/Nav.tsx","components/PubInfo.tsx","components/CrawlInfo.tsx","components/App.tsx","lib/spoons.ts","serviceWorker.ts","index.tsx"],"names":["sortPubsByDistanceTo","start","pubs","sort","a","b","distanceToNext","distanceTo","LatLon","Number","lat","lng","shiftClosestPub","shift","getClosestPubs","limit","slice","nearestTowardsEndNextMethod","end","allPubs","crawlPubs","availablePubs","bounds","google","maps","LatLngBounds","startPub","push","extend","console","log","endPub","getClosestPub","testPubs","nextPub","_","remove","pub","id","encodeURIComponent","Nav","setPubLimit","setDistanceLimit","className","type","placeholder","onChange","event","parseInt","target","value","name","PubInfo","address1","city","postcode","href","rel","url","CrawlInfo","distance","totalDistance","reduce","total","dest","length","waypoints","map","join","toFixed","GoogleApiWrapper","apiKey","process","useState","setStart","setEnd","setPubs","setBounds","activeMarker","setActiveMarker","selectedPub","setSelectedPub","setMap","pubLimit","distanceLimit","flatten","apiData","regions","region","items","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","i","nearestPubNextMethod","data-ribbon","title","mapTypeControl","fullscreenControl","zoom","onClick","props","latLng","onRightclick","onReady","initialCenter","draggable","onDragend","marker","key","icon","size","Size","scaledSize","anchor","Point","path","strokeColor","strokeOpacity","strokeWeight","pixelOffset","visible","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f1c021e.chunk.js","sourcesContent":["import _ from 'lodash';\nimport LatLon from 'geodesy/latlon-spherical.js'\nimport { Pub } from './spoons';\n\n/**\n * Given a LatLon sort Pubs by distance to it.\n *\n * @param start\n * @param pubs\n */\nexport function sortPubsByDistanceTo(start: LatLon, pubs: Pub[]): void {\n  pubs.sort((a, b) => {\n    a.distanceToNext = start.distanceTo(new LatLon(Number(a.lat), Number(a.lng)));\n    b.distanceToNext = start.distanceTo(new LatLon(Number(b.lat), Number(b.lng)));\n\n    return a.distanceToNext - b.distanceToNext;\n  });\n}\n\n/**\n * Given a LatLon find the closest pub and remove it from the given list of Pubs.\n *\n * @param start\n * @param pubs\n */\nexport function shiftClosestPub(start: LatLon, pubs: Pub[]): Pub {\n  sortPubsByDistanceTo(start, pubs);\n\n  return pubs.shift() as Pub;\n}\n\n/**\n * Given a LatLon find the closest pub from the given list of Pubs.\n *\n * @param start\n * @param pubs\n */\nexport function getClosestPub(start: LatLon, pubs: Pub[]): Pub {\n  sortPubsByDistanceTo(start, pubs);\n\n  return pubs[0];\n}\n\n/**\n * Given a LatLon find the closest pub and remove it from the given list of Pubs.\n *\n * @param start\n * @param pubs\n */\nexport function getClosestPubs(start: LatLon, pubs: Pub[], limit: number = 10): Pub[] {\n  sortPubsByDistanceTo(start, pubs);\n\n  return pubs.slice(0, limit);\n}\n\n/**\n * Convert meters to miles.\n *\n * @param distance\n */\nexport function metersToMiles(distance: number) {\n  return distance * 0.000621371192;\n}\n\n/**\n * Convert meters to miles.\n *\n * @param distance\n */\nexport function milesToMeters(distance: number) {\n  return distance * 1609.344;\n}\n\n/**\n * Create a pub crawl route based on finding the next nearest pub.\n *\n * @param start\n * @param allPubs\n * @param pubLimit\n * @param distanceLimit\n */\nexport function nearestPubNextMethod(start: LatLon, allPubs: Pub[], pubLimit: number, distanceLimit: number) {\n  const crawlPubs = [];\n  const availablePubs = allPubs;\n\n  const bounds = new google.maps.LatLngBounds();\n  bounds.extend({ lat: start.lat, lng: start.lng });\n\n  let nextPub = shiftClosestPub(start, availablePubs);\n\n  for (let i=0; i < pubLimit; i++) {\n    console.log('Adding', nextPub);\n\n    crawlPubs.push(nextPub);\n\n    bounds.extend(nextPub);\n\n    nextPub = shiftClosestPub(new LatLon(nextPub.lat, nextPub.lng), availablePubs);\n\n    if(start.distanceTo(new LatLon(nextPub.lat, nextPub.lng)) > milesToMeters(distanceLimit)) {\n      break;\n    }\n  }\n\n  return {\n    bounds,\n    crawlPubs\n  }\n}\n\n/**\n * Create a pub crawl route based on finding the next nearest pub that is also closest to the end point.\n *\n * @param start\n * @param allPubs\n * @param pubLimit\n * @param distanceLimit\n */\nexport function nearestTowardsEndNextMethod(start: LatLon, end: LatLon, allPubs: Pub[]) {\n  const crawlPubs = [];\n  const availablePubs = allPubs;\n\n  const bounds = new google.maps.LatLngBounds();\n\n  const startPub = shiftClosestPub(start, availablePubs);\n  crawlPubs.push(startPub);\n  bounds.extend(startPub);\n\n  console.log('Start', startPub);\n\n  const endPub = getClosestPub(end, availablePubs);\n\n  console.log('End', endPub);\n\n  let testPubs = getClosestPubs(start, availablePubs, 20);\n  let nextPub = shiftClosestPub(end, testPubs);\n  _.remove(availablePubs, pub => pub.id === nextPub.id);\n  console.log('Next', nextPub);\n\n  while (nextPub.id !== endPub.id) {\n    crawlPubs.push(nextPub);\n    bounds.extend(nextPub);\n\n    testPubs = getClosestPubs(new LatLon(nextPub.lat, nextPub.lng), availablePubs, 20);\n    nextPub = shiftClosestPub(end, testPubs);\n    console.log('Next', nextPub);\n    _.remove(availablePubs, pub => pub.id === nextPub.id);\n  }\n\n  crawlPubs.push(endPub);\n  bounds.extend(endPub);\n\n  return {\n    bounds,\n    crawlPubs\n  }\n}\n","const icon = '<svg version=\"1.1\" viewBox=\"0 0 27 39\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><g transform=\"translate(1 1)\"><circle id=\"a\" cx=\"12.5\" cy=\"12.5\" r=\"11.111\" fill=\"#fff\"/><path d=\"m12.501 0c-6.9038 0-12.501 5.5979-12.501 12.5 0 2.2793 0.61375 4.4099 1.6794 6.2504l10.821 18.749 10.821-18.749c1.0656-1.8406 1.6788-3.9711 1.6788-6.2504 0-6.9023-5.5969-12.5-12.499-12.5zm0.14933 22.486c5.4248 0 9.8364-4.4137 9.8364-9.8381 0-5.4244-4.4115-9.8367-9.8364-9.8367-5.4248 0-9.8392 4.4123-9.8392 9.8367 0 5.4244 4.4143 9.8381 9.8392 9.8381z\" fill=\"#197DFF\" stroke=\"#197DFF\"/><circle cx=\"12.5\" cy=\"12.5\" r=\"11.111\" stroke=\"#fff\"/><path d=\"m8.9174 14.934 1.7554-7.9459 0.14647-0.11764h3.4018l0.14516 0.1122 1.8613 7.1476 1.9074-7.2237 0.14503-0.1117h2.1861l0.12646 0.069327 1.0616 1.6641 0.016716 0.1254-2.9514 9.447-0.14343 0.10527-3.9443-0.0068161-0.14602-0.11679-1.8223-8.0267-2.1141 8.0228-0.14505 0.11178h-3.9235l-0.14376-0.1072-2.7585-9.2647 0.015656-0.12083 1.069-1.7551 0.12811-0.071971h1.995l0.14553 0.11365 1.9856 7.9499z\" fill=\"#197DFF\" stroke=\"#197DFF\" stroke-width=\".3\"/></g></g></svg>';\n\nexport default `data:image/svg+xml;charset=utf-8,${encodeURIComponent(icon)}`;\n","import React from 'react';\nimport './Nav.css';\n\nconst Nav: React.FC<{ setPubLimit: Function, setDistanceLimit: Function }> = ({ setPubLimit, setDistanceLimit }) => {\n  return (\n    <div className=\"nav\">\n      <h3>Spoons Pub Crawl Generator</h3>\n      <form>\n        I want to visit up to\n        <input type=\"number\" placeholder=\"10\" onChange={ event => setPubLimit(parseInt(event.target.value) || 10) } name=\"pubLimit\" />\n        pubs <br /> and only end up\n        <input type=\"number\" placeholder=\"10\" onChange={ event => setDistanceLimit(parseInt(event.target.value) || 10) } name=\"distanceLimit\" /> miles away\n        <br />\n        <br />\n        <small>* Left click to set a start location<br />* Right click to set an end location</small>\n      </form>\n    </div>\n  );\n}\n\nexport default Nav\n","import React from 'react';\nimport LatLon from 'geodesy/latlon-spherical.js'\nimport { Pub } from '../lib/spoons';\n\nconst PubInfo: React.FC<{ pub: Pub, start?: LatLon }> = ({ pub, start }) => {\n  return (\n    <div>\n      <h3>{ pub.name }</h3>\n      <small>\n        { pub.address1 }<br/>\n        { pub.city } { pub.postcode }\n      </small>\n      <p>\n        <a href={ `https://www.google.com/maps/dir/?api=1&origin=${start?.lat},${start?.lng}&destination=${pub.lat},${pub.lng}` } target=\"_blank\" rel=\"noopener noreferrer\">Directions</a> | <a href={ `https://www.jdwetherspoon.com${pub.url}` } target=\"_blank\" rel=\"noopener noreferrer\">Website</a>\n      </p>\n    </div>\n  );\n}\n\nexport default PubInfo\n","import React from 'react';\nimport { Pub } from '../lib/spoons';\nimport { metersToMiles } from '../lib/calc';\nimport './CrawlInfo.css';\n\nconst CrawlInfo: React.FC<{ pubs: Pub[] }> = ({ pubs }) => {\n  const totalDistance = pubs.reduce((total, pub) => pub.distanceToNext ? total + pub.distanceToNext : total, 0);\n  const dest = pubs[pubs.length-1];\n  const waypoints = pubs.map(pub => `${pub.lat},${pub.lng}`).join('|');\n\n  return (\n    <div className=\"crawlInfo\">\n      <small>Your crawl visits { pubs.length } pubs and is approximately { metersToMiles(totalDistance).toFixed(1) } miles long</small><br />\n      <small>{ pubs.length <= 10 && (<a href={ `https://www.google.com/maps/dir/?api=1&travelmode=walking&dir_action=navigate&destination=${dest?.lat},${dest?.lng}&waypoints=${waypoints}` } target=\"_blank\" rel=\"noopener noreferrer\">Get directions</a>) }</small>\n    </div>\n  );\n}\n\nexport default CrawlInfo\n","import React, { useState, useEffect } from 'react';\nimport LatLon from 'geodesy/latlon-spherical.js'\nimport { GoogleApiWrapper, Map, Marker, Polyline, InfoWindow } from 'google-maps-react';\nimport { nearestPubNextMethod, nearestTowardsEndNextMethod } from '../lib/calc';\nimport { getAllPubs, Pub } from '../lib/spoons';\nimport icon from '../lib/icon';\nimport Nav from './Nav';\nimport PubInfo from './PubInfo';\nimport CrawlInfo from './CrawlInfo';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [start, setStart] = useState<LatLon>();\n  const [end, setEnd] = useState<LatLon>();\n  const [pubs, setPubs] = useState<Pub[]>([]);\n  const [bounds, setBounds] = useState<google.maps.LatLngBounds>();\n  const [activeMarker, setActiveMarker] = useState<google.maps.Marker>();\n  const [selectedPub, setSelectedPub] = useState<Pub>();\n  const [map, setMap] = useState<google.maps.Map>();\n  const [pubLimit, setPubLimit] = useState(10);\n  const [distanceLimit, setDistanceLimit] = useState(10);\n\n  const allPubs = getAllPubs();\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position: Position) => {\n      setStart(new LatLon(position.coords.latitude, position.coords.longitude));\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log('Generating crawl');\n\n    if (!start) {\n      return;\n    }\n\n    if (end) {\n      let { crawlPubs, bounds } = nearestTowardsEndNextMethod(start, end, allPubs);\n\n      setPubs(crawlPubs);\n      setBounds(bounds);\n    } else {\n      const { crawlPubs, bounds } = nearestPubNextMethod(start, allPubs, pubLimit, distanceLimit);\n\n      setPubs(crawlPubs);\n      setBounds(bounds);\n    }\n  }, [start, end, pubLimit, distanceLimit]);\n\n  return (\n    <div className=\"app\">\n      <a className=\"github-fork-ribbon\" href=\"https://github.com/threesquared/sprawl\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\">Fork me on GitHub</a>\n      <Nav\n        setPubLimit={ setPubLimit }\n        setDistanceLimit={ setDistanceLimit }\n      />\n      { pubs.length && (\n        <CrawlInfo\n          pubs={ pubs }\n        />\n      ) }\n      <Map\n        google={ google }\n        mapTypeControl={ false }\n        fullscreenControl={ false }\n        zoom={ 10 }\n        onClick={ (props, map, event) => setStart(new LatLon(event.latLng.lat(), event.latLng.lng())) }\n        onRightclick={ (props, map, event) => setEnd(new LatLon(event.latLng.lat(), event.latLng.lng())) }\n        onReady={ (props, map) => setMap(map) }\n        bounds={ bounds }\n        initialCenter={{\n          lat: 51.5074,\n          lng: 0.1278\n        }}\n      >\n        { start && (\n          <Marker\n            position={ start }\n            draggable={ true }\n            onDragend={ (marker: any, event: any) => setStart(new LatLon(event.position.lat(), event.position.lng())) }\n          />\n        ) }\n        { pubs.map(pub => (\n          <Marker\n            key={ pub.id }\n            position={ pub }\n            icon={{\n              url: icon,\n              size: new google.maps.Size(200,200),\n              scaledSize: new google.maps.Size(32,32),\n              anchor: new google.maps.Point(16,32)\n            }}\n            onClick={ (props, marker) => {\n              setSelectedPub(pub);\n              setActiveMarker(marker);\n            } }\n          />\n        )) }\n        { end && (\n          <Marker\n            position={ end }\n            draggable={ true }\n            onDragend={ (marker: any, event: any) => setEnd(new LatLon(event.position.lat(), event.position.lng())) }\n          />\n        ) }\n        <Polyline\n          path={ pubs }\n          strokeColor=\"#0000FF\"\n          strokeOpacity={ 0.8 }\n          strokeWeight={ 2 }\n        />\n        <InfoWindow\n          google={ google }\n          map={ map as google.maps.Map }\n          marker={ activeMarker as google.maps.Marker }\n          pixelOffset={ new google.maps.Size(-85, 0) }\n          visible={ activeMarker !== null }\n        >\n          { selectedPub && (\n            <PubInfo\n              pub={ selectedPub }\n              start={ start }\n            />\n          ) }\n        </InfoWindow>\n      </Map>\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GOOGLE_API_KEY as string\n})(App)\n","import axios from 'axios';\nimport _ from 'lodash';\nimport LatLon from 'geodesy/latlon-spherical.js'\nimport apiData from '../spoons.json';\n\nexport async function findPubs(location: LatLon): Promise<Pub[]> {\n  const response = await axios.post<{ results: Pub[] }>('https://www.jdwetherspoon.com/api/advancedsearch', {\n    location,\n    paging: {\n      numberPerPage: 30,\n      page: 0,\n      UsePagination: true\n    },\n  });\n\n  return response.data.results;\n}\n\nexport function getAllPubs(): Pub[] {\n  return _.flatten(_.flatten(_.map(apiData.regions, 'subRegions')).map(region => region.items)); // Fix this dumb shit\n}\n\nexport interface Pub {\n  PubIsClosed: boolean;\n  PubIsTemporaryClosed: boolean;\n  address1: string;\n  city: string;\n  county: string;\n  distanceTo: number;\n  distanceToNext?: number;\n  facilities: string[];\n  id: string;\n  isAirport: boolean;\n  isHotel: boolean;\n  lat: number;\n  lng: number;\n  name: string;\n  postcode: string;\n  summary: string;\n  telephone: string;\n  url: string;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}