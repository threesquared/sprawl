{"version":3,"sources":["lib/calc.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["findClosest","start","locations","sort","a","b","distanceTo","LatLon","Number","lat","lng","shift","GoogleApiWrapper","apiKey","useState","setStart","setLocations","bounds","setBounds","activeMarker","setActiveMarker","selectedPub","setSelectedPub","map","setMap","pubLimit","setPubLimit","distanceLimit","setDistanceLimit","allPubs","_","flatten","apiData","regions","region","items","plotCrawl","console","log","google","maps","LatLngBounds","crawlPubs","nextPub","i","push","extend","useEffect","navigator","geolocation","getCurrentPosition","position","latlon","coords","latitude","longitude","className","type","placeholder","onChange","event","parseInt","target","value","name","onClick","mapTypeControl","zoom","props","onReady","initialCenter","draggable","onDragend","marker","location","key","id","icon","url","encodeURIComponent","size","Size","scaledSize","anchor","Point","labelOrigin","path","strokeColor","strokeOpacity","strokeWeight","pixelOffset","visible","address1","city","postcode","href","rel","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3aec23ac.chunk.js","sourcesContent":["import LatLon from 'geodesy/latlon-spherical.js'\nimport { Pub } from './spoons';\n\nexport function findClosest(start: LatLon, locations: Pub[]): Pub {\n  locations.sort((a, b) => {\n    a.distanceTo = start.distanceTo(new LatLon(Number(a.lat), Number(a.lng)));\n    b.distanceTo = start.distanceTo(new LatLon(Number(b.lat), Number(b.lng)));\n\n    return a.distanceTo - b.distanceTo;\n  });\n\n  return locations.shift() as Pub;\n}\n","import React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport apiData from '../spoons.json';\nimport './App.css';\nimport { Pub } from '../lib/spoons.js';\nimport LatLon from 'geodesy/latlon-spherical.js'\nimport { findClosest } from '../lib/calc';\nimport { GoogleApiWrapper, Map, Marker, Polyline, InfoWindow } from 'google-maps-react';\n\nconst App: React.FC = () => {\n  const [start, setStart] = useState<LatLon>();\n  const [locations, setLocations] = useState<Pub[]>([]);\n  const [bounds, setBounds] = useState<google.maps.LatLngBounds>();\n  const [activeMarker, setActiveMarker] = useState<any>();\n  const [selectedPub, setSelectedPub] = useState<Pub>();\n  const [map, setMap] = useState<google.maps.Map>();\n  const [pubLimit, setPubLimit] = useState(10);\n  const [distanceLimit, setDistanceLimit] = useState(20);\n\n  const icon = '<svg version=\"1.1\" viewBox=\"0 0 27 39\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><g transform=\"translate(1 1)\"><circle id=\"a\" cx=\"12.5\" cy=\"12.5\" r=\"11.111\" fill=\"#fff\"/><path d=\"m12.501 0c-6.9038 0-12.501 5.5979-12.501 12.5 0 2.2793 0.61375 4.4099 1.6794 6.2504l10.821 18.749 10.821-18.749c1.0656-1.8406 1.6788-3.9711 1.6788-6.2504 0-6.9023-5.5969-12.5-12.499-12.5zm0.14933 22.486c5.4248 0 9.8364-4.4137 9.8364-9.8381 0-5.4244-4.4115-9.8367-9.8364-9.8367-5.4248 0-9.8392 4.4123-9.8392 9.8367 0 5.4244 4.4143 9.8381 9.8392 9.8381z\" fill=\"#197DFF\" stroke=\"#197DFF\"/><circle cx=\"12.5\" cy=\"12.5\" r=\"11.111\" stroke=\"#fff\"/><path d=\"m8.9174 14.934 1.7554-7.9459 0.14647-0.11764h3.4018l0.14516 0.1122 1.8613 7.1476 1.9074-7.2237 0.14503-0.1117h2.1861l0.12646 0.069327 1.0616 1.6641 0.016716 0.1254-2.9514 9.447-0.14343 0.10527-3.9443-0.0068161-0.14602-0.11679-1.8223-8.0267-2.1141 8.0228-0.14505 0.11178h-3.9235l-0.14376-0.1072-2.7585-9.2647 0.015656-0.12083 1.069-1.7551 0.12811-0.071971h1.995l0.14553 0.11365 1.9856 7.9499z\" fill=\"#197DFF\" stroke=\"#197DFF\" stroke-width=\".3\"/></g></g></svg>';\n\n  const allPubs: Pub[] = _.flatten(_.flatten(_.map(apiData.regions, 'subRegions')).map(region => region.items)); // Fix this dumb shit\n\n  const markerMoved = (marker: any, event: any) => {\n    var latlon = new LatLon(event.position.lat(), event.position.lng());\n\n    plotCrawl(latlon);\n  };\n\n  const plotCrawl = (start: LatLon) => {\n    console.log('Generating crawl');\n\n    const bounds = new google.maps.LatLngBounds();\n\n    setStart(start);\n\n    const crawlPubs = [];\n\n    let nextPub = findClosest(start, allPubs);\n\n    for (let i=0; i < pubLimit; i++) {\n      console.log('Adding', nextPub);\n\n      crawlPubs.push(nextPub);\n      bounds.extend(nextPub);\n\n      nextPub = findClosest(new LatLon(nextPub.lat, nextPub.lng), allPubs);\n\n      if(start.distanceTo(new LatLon(nextPub.lat, nextPub.lng)) > (distanceLimit * 1609.344)) {\n        break;\n      }\n    }\n\n    setLocations(crawlPubs);\n    setBounds(bounds);\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position: Position) => {\n      var latlon = new LatLon(position.coords.latitude, position.coords.longitude);\n\n      plotCrawl(latlon);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"nav\">\n        <h3>Spoons Pub Crawl Generator</h3>\n        <form>\n          I want to visit\n          <input type=\"number\" placeholder=\"10\" onChange={ event => setPubLimit(parseInt(event.target.value) || 10) } name=\"pubLimit\" />\n          pubs <br /> and only end up\n          <input type=\"number\" placeholder=\"20\" onChange={ event => setDistanceLimit(parseInt(event.target.value) || 20) } name=\"distanceLimit\" /> miles away\n          <br />\n          <button type=\"button\" onClick={ () => start ? plotCrawl(start) : false }>Recalculate</button>\n          <br />\n          <br />\n          <small>* You can drag the red start location icon</small>\n        </form>\n      </div>\n      <Map\n        google={ google }\n        mapTypeControl={ false }\n        zoom={10}\n        onClick={ (props) => setActiveMarker(null) }\n        onReady={ (props, map) => setMap(map) }\n        bounds={ bounds }\n        initialCenter={{\n          lat: 51.5074,\n          lng: 0.1278\n        }}\n      >\n        { start && (\n          <Marker\n            position={ start }\n            draggable={ true }\n            onDragend={ markerMoved }\n            onClick={ (props, marker) => {\n              setSelectedPub(props as any);\n              setActiveMarker(marker);\n            } }\n          />\n        ) }\n        { locations.map(location => (\n          <Marker\n            key={location.id}\n            position={location}\n            icon={{\n              url:`data:image/svg+xml;charset=utf-8,${encodeURIComponent(icon)}`,\n              size: new google.maps.Size(200,200),\n              scaledSize: new google.maps.Size(32,32),\n              anchor: new google.maps.Point(16,32),\n              labelOrigin: new google.maps.Point(0,0)\n            }}\n            onClick={ (props, marker) => {\n              setSelectedPub(location);\n              setActiveMarker(marker);\n            } }\n          />\n        )) }\n        <Polyline\n          path={locations}\n          strokeColor=\"#0000FF\"\n          strokeOpacity={0.8}\n          strokeWeight={2}\n        />\n        <InfoWindow\n          google={ google }\n          map={ map as google.maps.Map }\n          marker={activeMarker}\n          pixelOffset={new google.maps.Size(-85, 0)}\n          visible={activeMarker !== null}\n        >\n          { selectedPub && (<div>\n            <h3>{ selectedPub.name }</h3>\n            <small>\n              { selectedPub.address1 }<br/>\n              { selectedPub.city } { selectedPub.postcode }\n            </small>\n            <p>\n              <a href={ `https://www.google.com/maps/dir/?api=1&origin=${start?.lat},${start?.lng}&destination=${selectedPub.lat},${selectedPub.lng}` } target=\"_blank\" rel=\"noopener noreferrer\">Directions</a> | <a href={ `https://www.jdwetherspoon.com${selectedPub.url}` } target=\"_blank\" rel=\"noopener noreferrer\">Website</a>\n            </p>\n          </div> ) }\n        </InfoWindow>\n      </Map>\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBETDtuc4hnJsvED2xeT6Lw99uJO_asPZI'\n})(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}