{"version":3,"sources":["lib/calc.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["findClosest","start","locations","sort","a","b","distanceTo","LatLon","Number","lat","lng","shift","GoogleApiWrapper","apiKey","useState","setLocations","useEffect","console","log","allPubs","_","flatten","map","apiData","regions","region","items","navigator","geolocation","getCurrentPosition","position","latlon","coords","latitude","longitude","crawlPubs","i","next","push","className","google","zoom","initialCenter","location","key","id","name","path","strokeColor","strokeOpacity","strokeWeight","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"28jrBAGO,SAASA,EAAYC,EAAeC,GAQzC,OAPAA,EAAUC,MAAK,SAACC,EAAGC,GAIjB,OAHAD,EAAEE,WAAaL,EAAMK,WAAW,IAAIC,IAAOC,OAAOJ,EAAEK,KAAMD,OAAOJ,EAAEM,OACnEL,EAAEC,WAAaL,EAAMK,WAAW,IAAIC,IAAOC,OAAOH,EAAEI,KAAMD,OAAOH,EAAEK,OAE5DN,EAAEE,WAAaD,EAAEC,cAGnBJ,EAAUS,Q,WCsDJC,6BAAiB,CAC9BC,OAAQ,2CADKD,EAxDO,WAAO,IAAD,EAEQE,mBAAgB,IAFxB,mBAEnBZ,EAFmB,KAERa,EAFQ,KA4B1B,OAxBAC,qBAAU,WAERC,QAAQC,IAAI,UAEZ,IAAMC,EAAiBC,IAAEC,QAAQD,IAAEC,QAAQD,IAAEE,IAAIC,EAAQC,QAAS,eAAeF,KAAI,SAAAG,GAAM,OAAIA,EAAOC,UAEtGC,UAAUC,YAAYC,oBAAmB,SAACC,GAIxC,IAHA,IAAIC,EAAS,IAAIxB,IAAOuB,EAASE,OAAOC,SAAUH,EAASE,OAAOE,WAC5DC,EAAY,GAETC,EAAE,EAAGA,GAAK,GAAIA,IAAK,CAC1B,IAAMC,EAAOrC,EAAY+B,EAAQZ,GAEjCF,QAAQC,IAAI,SAAUmB,GAEtBF,EAAUG,KAAKD,GAEfN,EAAS,IAAIxB,IAAO8B,EAAK5B,IAAK4B,EAAK3B,KAGrCK,EAAaoB,QAEd,IAGD,yBAAKI,UAAU,OACb,yBAAKA,UAAU,OAAf,YACA,kBAAC,MAAD,CACEC,OAASA,OACTC,KAAM,GACNC,cAAe,CACbjC,IAAK,QACLC,IAAK,QAGLR,EAAUoB,KAAI,SAAAqB,GAAQ,OACtB,kBAAC,SAAD,CACEC,IAAKD,EAASE,GACdC,KAAMH,EAASG,KACfhB,SAAUa,OAGd,kBAAC,WAAD,CACEI,KAAM7C,EACN8C,YAAY,UACZC,cAAe,GACfC,aAAc,SC/CJC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmB/B,WACrBA,UAAUgC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.63320f48.chunk.js","sourcesContent":["import LatLon from 'geodesy/latlon-spherical.js'\nimport { Pub } from './spoons';\n\nexport function findClosest(start: LatLon, locations: Pub[]) {\n  locations.sort((a, b) => {\n    a.distanceTo = start.distanceTo(new LatLon(Number(a.lat), Number(a.lng)));\n    b.distanceTo = start.distanceTo(new LatLon(Number(b.lat), Number(b.lng)));\n\n    return a.distanceTo - b.distanceTo;\n  });\n\n  return locations.shift() as Pub;\n}\n","import React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport apiData from '../spoons.json';\nimport './App.css';\nimport { Pub } from '../lib/spoons.js';\nimport LatLon from 'geodesy/latlon-spherical.js'\nimport { findClosest } from '../lib/calc';\nimport { GoogleApiWrapper, Map, Marker, Polyline } from 'google-maps-react';\n\nconst App: React.FC = () => {\n\n  const [locations, setLocations] = useState<Pub[]>([]);\n\n  useEffect(() => {\n\n    console.log('Loaded');\n\n    const allPubs: Pub[] = _.flatten(_.flatten(_.map(apiData.regions, 'subRegions')).map(region => region.items)); // Fix this dumb shit\n\n    navigator.geolocation.getCurrentPosition((position: Position) => {\n      var latlon = new LatLon(position.coords.latitude, position.coords.longitude);\n      const crawlPubs = [];\n\n      for (let i=0; i <= 10; i++) {\n        const next = findClosest(latlon, allPubs);\n\n        console.log('Adding', next);\n\n        crawlPubs.push(next);\n\n        latlon = new LatLon(next.lat, next.lng)\n      }\n\n      setLocations(crawlPubs);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"nav\">Nav Menu</div>\n      <Map\n        google={ google }\n        zoom={10}\n        initialCenter={{\n          lat: 51.5074,\n          lng: 0.1278\n        }}\n      >\n        { locations.map(location => (\n          <Marker\n            key={location.id}\n            name={location.name}\n            position={location}\n          />\n        )) }\n        <Polyline\n          path={locations}\n          strokeColor=\"#0000FF\"\n          strokeOpacity={0.8}\n          strokeWeight={2} />\n      </Map>\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBETDtuc4hnJsvED2xeT6Lw99uJO_asPZI'\n})(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}